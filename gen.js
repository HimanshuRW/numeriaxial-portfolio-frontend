// Generate dummy "bell curve" portfolio returns data
function generateNormalDistributionData( mean = 0.004, std = 0.012, points = 180 ) {
  const portfolio_returns = [];
  const dates = [];

  // Start date
  let currentDate = new Date("2024-11-01");

  for (let i = 0; i < points; i++) {
    // Skip weekends to mimic trading days
    while (currentDate.getDay() === 0 || currentDate.getDay() === 6) {
      currentDate.setDate(currentDate.getDate() + 1);
    }

    // Box–Muller transform to get normal distribution values
    const u1 = Math.random();
    const u2 = Math.random();
    const randStdNormal =
      Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(2.0 * Math.PI * u2);
    const value = mean + std * randStdNormal;

    portfolio_returns.push(parseFloat(value.toFixed(4))); // 4 decimal precision
    dates.push(currentDate.toISOString().split("T")[0]);

    // Move to next day
    currentDate.setDate(currentDate.getDate() + 1);
  }

  return {
    time_series_data: {
      dates,
      portfolio_returns
    }
  };
}

function generateValuationChartDataFromReturns(time_series_data, portfolio_starting_value = 2000000.00) {
  if (!time_series_data?.dates || !time_series_data?.portfolio_returns) return [];

  const { dates, portfolio_returns } = time_series_data;
  const values = [];

  let currentValue = portfolio_starting_value;

  for (let i = 0; i < dates.length; i++) {
    // Apply return to previous day's close
    currentValue *= (1 + portfolio_returns[i]);

    const close = currentValue;
    const open = close * (1 + (Math.random() - 0.5) * 0.02); // ±1% random variation
    const high = Math.max(open, close) * (1 + Math.random() * 0.01); // up to +1%
    const low = Math.min(open, close) * (1 - Math.random() * 0.01);  // down to -1%
    const volume = Math.floor(Math.random() * 1000000) + 500000; // 0.5M - 1.5M

    values.push({
      date: dates[i],
      open,
      high,
      low,
      close,
      volume
    });
  }

  return values;
}

// const returnBased = generateNormalDistributionData();
// console.log("Generated return-based data:", JSON.stringify(returnBased));

const my_obj = {"dates":["2024-11-01","2024-11-04","2024-11-05","2024-11-06","2024-11-07","2024-11-08","2024-11-11","2024-11-12","2024-11-13","2024-11-14","2024-11-15","2024-11-18","2024-11-19","2024-11-20","2024-11-21","2024-11-22","2024-11-25","2024-11-26","2024-11-27","2024-11-28","2024-11-29","2024-12-02","2024-12-03","2024-12-04","2024-12-05","2024-12-06","2024-12-09","2024-12-10","2024-12-11","2024-12-12","2024-12-13","2024-12-16","2024-12-17","2024-12-18","2024-12-19","2024-12-20","2024-12-23","2024-12-24","2024-12-25","2024-12-26","2024-12-27","2024-12-30","2024-12-31","2025-01-01","2025-01-02","2025-01-03","2025-01-06","2025-01-07","2025-01-08","2025-01-09","2025-01-10","2025-01-13","2025-01-14","2025-01-15","2025-01-16","2025-01-17","2025-01-20","2025-01-21","2025-01-22","2025-01-23","2025-01-24","2025-01-27","2025-01-28","2025-01-29","2025-01-30","2025-01-31","2025-02-03","2025-02-04","2025-02-05","2025-02-06","2025-02-07","2025-02-10","2025-02-11","2025-02-12","2025-02-13","2025-02-14","2025-02-17","2025-02-18","2025-02-19","2025-02-20","2025-02-21","2025-02-24","2025-02-25","2025-02-26","2025-02-27","2025-02-28","2025-03-03","2025-03-04","2025-03-05","2025-03-06","2025-03-07","2025-03-10","2025-03-11","2025-03-12","2025-03-13","2025-03-14","2025-03-17","2025-03-18","2025-03-19","2025-03-20","2025-03-21","2025-03-24","2025-03-25","2025-03-26","2025-03-27","2025-03-28","2025-03-31","2025-04-01","2025-04-02","2025-04-03","2025-04-04","2025-04-07","2025-04-08","2025-04-09","2025-04-10","2025-04-11","2025-04-14","2025-04-15","2025-04-16","2025-04-17","2025-04-18","2025-04-21","2025-04-22","2025-04-23","2025-04-24","2025-04-25","2025-04-28","2025-04-29","2025-04-30","2025-05-01","2025-05-02","2025-05-05","2025-05-06","2025-05-07","2025-05-08","2025-05-09","2025-05-12","2025-05-13","2025-05-14","2025-05-15","2025-05-16","2025-05-19","2025-05-20","2025-05-21","2025-05-22","2025-05-23","2025-05-26","2025-05-27","2025-05-28","2025-05-29","2025-05-30","2025-06-02","2025-06-03","2025-06-04","2025-06-05","2025-06-06","2025-06-09","2025-06-10","2025-06-11","2025-06-12","2025-06-13","2025-06-16","2025-06-17","2025-06-18","2025-06-19","2025-06-20","2025-06-23","2025-06-24","2025-06-25","2025-06-26","2025-06-27","2025-06-30","2025-07-01","2025-07-02","2025-07-03","2025-07-04","2025-07-07","2025-07-08","2025-07-09","2025-07-10"],"portfolio_returns":[0.0036,0.0122,0.0236,0.0144,-0.003,-0.0063,-0.0142,-0.018,0.0154,0.0066,0.0108,0.0153,-0.0171,0.0032,0.0024,-0.018,-0.0108,0.0117,0.0015,0.0273,0.0039,0.0194,0.0163,0.0073,0.0037,-0.0039,-0.0121,0.0096,0.0128,-0.0048,0.0075,0.0033,0.0138,0.0049,0.0024,-0.001,0.0035,0.0139,0.0058,-0.0016,-0.0097,0.0267,0.0288,0.0051,0.0099,0.001,0.0015,0.0077,0.0096,0.0079,0.0105,0.0232,0.0185,-0.0155,-0.0016,0.0011,-0.0005,-0.0098,0.0265,-0.016,-0.0048,0.0049,0.0084,0.0144,-0.0227,-0.0054,0.0043,0.0114,0.0043,-0.0021,0.018,0.0173,0.0193,-0.0084,-0.0077,0.0019,0.0063,0.0075,0.0093,0.0145,-0.005,-0.0134,0.0132,0.0048,0.0169,0.0237,0.0134,0.0017,-0.0067,0.0158,-0.0055,0.0087,0.0168,0.024,-0.0026,0.0317,0.0181,0.0026,0.026,0.0139,0.0058,0.0239,-0.01,0.0094,0.0141,0.0101,-0.0098,-0.0032,-0.0091,0.0097,0.0251,0.0197,0.0188,-0.0091,-0.002,-0.0095,-0.0091,0.0196,0.0232,0.0178,-0.0073,-0.0057,0.0028,0.0308,0.0057,0.0063,0.0082,0.0003,-0.0046,0.0049,0.0252,-0.0041,-0.0075,0.0132,-0.0035,0.0172,0.0065,0.0157,0.0039,-0.0008,0.0126,-0.0038,-0.0112,0.0119,-0.0013,-0.0009,0.0072,0.0142,-0.0022,0.0083,0.0122,0.0151,0.0329,0.0135,0.0272,0.0047,-0.0213,-0.0012,0.017,-0.0071,0.0289,-0.0073,0.0269,-0.0062,-0.0173,0.025,0.0123,0.0145,0.0072,-0.0065,-0.0127,-0.0222,-0.021,-0.0089,0.0082,0.0085,-0.0006,0.0029,0.0023,0.0185]}

const valuationChartData = generateValuationChartDataFromReturns(my_obj);

console.log("Generated returnBased data:", JSON.stringify(valuationChartData));
